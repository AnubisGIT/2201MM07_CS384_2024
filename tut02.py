# -*- coding: utf-8 -*-
"""21 Aug.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rih5inl3tFEODyw0ulhJHhrWxS4mxAKP
"""

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

def rotated_numbers(n):
    num_str = str(n)
    numbers = []
    length = len(num_str)

    for i in range(length):
        rotated = num_str[i:] + num_str[:i]
        numbers.append(int(rotated))

    return numbers

def rotated_prime(n):
    rotated_num = rotated_numbers(n)

    for rotated in rotated_num:
        if not is_prime(rotated):
            return False

    return True

rotated_prime(23)

def permutation(s):
    if len(s) == 0:
        return []
    if len(s) == 1:
        return [s]
    l = []
    for i in range(len(s)):
        m = s[i]
        remStr = s[:i] + s[i+1:]
        for p in permutation(remStr):
            l.append(m + p)
    return l

def print_all(s):
    permutations = permutation(s)
    for perm in permutations:
        print(perm)

print_all("anu")