# -*- coding: utf-8 -*-
"""9 Sep.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sXO4NBNbA_eb32f0GKzD3p0OCPrBJTdE
"""

#sorted then used binary search TC=O(n*log(n))
def find_triplets(nums):
    nums.sort()
    result = []

    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i - 1]:
            continue

        left, right = i + 1, len(nums) - 1
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            if total == 0:
                result.append([nums[i], nums[left], nums[right]])

                # Skip duplicates for left and right
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1

                left += 1
                right -= 1
            elif total < 0:
                left += 1
            else:
                right -= 1

    return result

print(find_triplets([-1, 0, 1, 2, -1, -4]))
print(find_triplets([-4, -2, 1, 0, 2, 3, -1, 4, -2]))
print(find_triplets([0, 0, 0, 0]))

#typical problem of stack solved using stack
#TC=O(n)
def is_balanced(s):
    stack = []
    pairs = {')': '(', '}': '{', ']': '['}

    for char in s:
        if char in pairs.values():
            stack.append(char)
        elif char in pairs.keys():
            if not stack or stack[-1] != pairs[char]:
                return "The input string is NOT balanced."
            stack.pop()

    if stack:
        return "The input string is NOT balanced."
    return "The input string is balanced."

print(is_balanced("{[()()]}"))
print(is_balanced("[{()]}"))
print(is_balanced("((()))"))