# -*- coding: utf-8 -*-
"""28 Aug.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/190fL3qJyG8kmhy_wry5kc6hv13fFThNZ
"""

class StudentGrades:
    def __init__(self):
        self.students = {}

    def add_student(self, name, grades):
        name = name.lower()  # Convert name to lowercase to handle case insensitivity
        self.students[name] = grades

    def update_grades(self, name, grades):
        name = name.lower()  # Convert name to lowercase to handle case insensitivity
        if name in self.students:
            self.students[name].extend(grades)
        else:
            print(f"Student {name} does not exist.")

    def calculate_average(self, name):
        name = name.lower()
        if name in self.students:
            grades = self.students[name]
            return sum(grades) / len(grades) if grades else 0
        else:
            print(f"Student {name} does not exist.")
            return None

    def print_students_with_averages(self):
        for name in self.students:
            average = self.calculate_average(name)
            print(f"{name.capitalize()} - Average: {average:.2f}")

    def sort_students_by_average_descending(self):
        sorted_students = []
        for name in self.students:
            average = self.calculate_average(name)
            sorted_students.append((name, average))

        # Sort using a simple sorting algorithm (Selection Sort)
        for i in range(len(sorted_students)):
            max_index = i
            for j in range(i + 1, len(sorted_students)):
                if sorted_students[j][1] > sorted_students[max_index][1]:
                    max_index = j
            sorted_students[i], sorted_students[max_index] = sorted_students[max_index], sorted_students[i]

        for name, average in sorted_students:
            print(f"{name.capitalize()} - Average: {average:.2f}")

# Example usage+
grades = StudentGrades()
grades.add_student('Anmol', [85, 90, 88])
grades.add_student('Naresh', [78, 81, 85])
grades.add_student('Neha', [92, 87, 90])

grades.print_students_with_averages()
print("Sorted students by average grade (descending):")
grades.sort_students_by_average_descending()

from collections import defaultdict

class AnagramGroups:
    def __init__(self):
        self.anagram_dict = defaultdict(list)

    def add_word(self, word):
        sorted_word = ''.join(sorted(word))
        self.anagram_dict[sorted_word].append(word)

    def calculate_frequency(self, word_list):
        frequency = defaultdict(int)
        for word in word_list:
            for char in word:
                frequency[char] += 1
        return dict(frequency)

    def find_highest_frequency_group(self):
        max_freq = 0
        max_group = None
        for key, words in self.anagram_dict.items():
            frequency = self.calculate_frequency(words)
            total_freq = sum(frequency.values())
            if total_freq > max_freq:
                max_freq = total_freq
                max_group = (key, words, frequency)
        return max_group

    def print_anagram_groups(self):
        for key, words in self.anagram_dict.items():
            print(f"'{key}': {words}")

# Example usage
anagrams = AnagramGroups()

words = ["listen", "silent", "enlist", "inlets", "google", "goolge", "cat", "tac", "act"]
for word in words:
    anagrams.add_word(word)

print("Anagram Dictionary:")
anagrams.print_anagram_groups()

key, group, frequency = anagrams.find_highest_frequency_group()
print(f"\nGroup with highest total character frequency: '{key}'")
print(f"Words: {group}")
print(f"Frequency: {frequency}")