# -*- coding: utf-8 -*-
"""lab05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Vh97iQvT05BNvJXkCPMEORetS6mJGMi
"""

def three_sum(nums):
    nums.sort()
    triplets = []
    n = len(nums)

    for i in range(n):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        left, right = i + 1, n - 1
        while left < right:
            s = nums[i] + nums[left] + nums[right]
            if s == 0:
                triplets.append([nums[i], nums[left], nums[right]])
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                left += 1
                right -= 1
            elif s < 0:
                left += 1
            else:
                right -= 1

    return triplets

# Example usage:
nums = [-1, 0, 1, 2, -1, -4]
print(three_sum(nums))  # Output: [[-1, -1, 2], [-1, 0, 1]]

def is_balanced(s):
    stack = []
    mapping = {')': '(', ']': '[', '}': '{'}

    for char in s:
        if char in mapping:
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return "The input string is NOT balanced."
        else:
            stack.append(char)

    return "The input string is balanced." if not stack else "The input string is NOT balanced."

# Example usage:
s = "{[()()]}"
print(is_balanced(s))  # Output: The input string is balanced.